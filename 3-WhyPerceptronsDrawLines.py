"""
üßÆ THE DEEP MATHEMATICS: Why Perceptrons Draw Lines!
===================================================

You asked the PERFECT question! Let's understand exactly WHY the
weighted sum formula creates a line, and what this means mathematically.

This is the heart of understanding perceptrons!
"""

import matplotlib.pyplot as plt
import numpy as np


def the_fundamental_equation():
    """
    Start with the basic perceptron equation and show it's a line
    """
    print("üßÆ THE FUNDAMENTAL EQUATION")
    print("=" * 30)

    print("üéØ Perceptron decision rule:")
    print("   if (w‚ÇÅ√óx‚ÇÅ + w‚ÇÇ√óx‚ÇÇ + bias) ‚â• 0:")
    print("       output = 1")
    print("   else:")
    print("       output = 0")
    print()

    print("üîç The KEY insight:")
    print("   The BOUNDARY between output=1 and output=0 happens when:")
    print("   w‚ÇÅ√óx‚ÇÅ + w‚ÇÇ√óx‚ÇÇ + bias = 0")
    print()

    print("üéì Wait... this looks familiar!")
    print("   Remember from high school: The equation of a line is:")
    print("   Ax + By + C = 0")
    print()

    print("ü§Ø THEY'RE THE SAME THING!")
    print("   w‚ÇÅ√óx‚ÇÅ + w‚ÇÇ√óx‚ÇÇ + bias = 0")
    print("   ‚Üë     ‚Üë     ‚Üë     ‚Üë")
    print("   A  √ó  x  +  B √ó y + C = 0")
    print()

    print("üí° So the perceptron's weighted sum IS a line equation!")
    print("   - w‚ÇÅ and w‚ÇÇ are the line's 'slope parameters'")
    print("   - bias is the line's 'intercept parameter'")
    print("   - The line divides the plane into two regions!")


def visualize_line_equation():
    """
    Show how different weights create different lines
    """
    print("\n\nüìä VISUALIZING THE LINE EQUATION")
    print("=" * 35)

    # Create a figure
    fig, axes = plt.subplots(2, 2, figsize=(12, 10))
    fig.suptitle("How Weights and Bias Create Different Lines!", fontsize=16)

    # Create a grid for plotting
    x = np.linspace(-2, 3, 400)

    # Different weight combinations
    examples = [
        ([1, 1, -1], "w‚ÇÅ=1, w‚ÇÇ=1, bias=-1", "x‚ÇÅ + x‚ÇÇ - 1 = 0"),
        ([1, -1, 0], "w‚ÇÅ=1, w‚ÇÇ=-1, bias=0", "x‚ÇÅ - x‚ÇÇ = 0"),
        ([2, 1, -2], "w‚ÇÅ=2, w‚ÇÇ=1, bias=-2", "2x‚ÇÅ + x‚ÇÇ - 2 = 0"),
        ([0, 1, -0.5], "w‚ÇÅ=0, w‚ÇÇ=1, bias=-0.5", "x‚ÇÇ - 0.5 = 0"),
    ]

    for i, (weights, title, equation) in enumerate(examples):
        row = i // 2
        col = i % 2
        ax = axes[row, col]

        w1, w2, bias = weights

        if w2 != 0:  # Normal case
            # Solve for x‚ÇÇ: w‚ÇÅ√óx‚ÇÅ + w‚ÇÇ√óx‚ÇÇ + bias = 0
            # x‚ÇÇ = -(w‚ÇÅ√óx‚ÇÅ + bias) / w‚ÇÇ
            y = -(w1 * x + bias) / w2
            ax.plot(x, y, "b-", linewidth=3, label=f"Decision Line")
        else:  # Vertical line case
            # x‚ÇÅ = -bias / w‚ÇÅ
            x_line = -bias / w1
            ax.axvline(x=x_line, color="b", linewidth=3, label="Decision Line")

        # Add regions
        xx, yy = np.meshgrid(np.linspace(-1, 2, 50), np.linspace(-1, 2, 50))
        Z = w1 * xx + w2 * yy + bias

        ax.contourf(
            xx,
            yy,
            Z >= 0,
            levels=[0.5, 1.5],
            colors=["lightcoral"],
            alpha=0.3,
            label="Output = 1",
        )
        ax.contourf(
            xx,
            yy,
            Z < 0,
            levels=[-1.5, -0.5],
            colors=["lightblue"],
            alpha=0.3,
            label="Output = 0",
        )

        # Add the four standard points
        points = [[0, 0], [0, 1], [1, 0], [1, 1]]
        for point in points:
            x1, x2 = point
            value = w1 * x1 + w2 * x2 + bias
            output = 1 if value >= 0 else 0
            color = "red" if output == 0 else "green"
            marker = "s" if output == 0 else "o"

            ax.scatter(
                x1, x2, s=150, c=color, marker=marker, edgecolors="black", linewidth=2
            )
            ax.annotate(
                f"{point}\n‚Üí{output}",
                (x1, x2),
                xytext=(10, 10),
                textcoords="offset points",
                fontsize=9,
                fontweight="bold",
            )

        ax.set_xlim(-0.5, 1.5)
        ax.set_ylim(-0.5, 1.5)
        ax.set_xlabel("x‚ÇÅ (Input 1)")
        ax.set_ylabel("x‚ÇÇ (Input 2)")
        ax.set_title(f"{title}\n{equation}")
        ax.grid(True, alpha=0.3)
        ax.legend(loc="upper right", fontsize=8)

    plt.tight_layout()
    plt.show()

    print("üëÅÔ∏è WHAT YOU'RE SEEING:")
    print("- Blue line: The decision boundary (where weighted sum = 0)")
    print("- Red region: Where output = 0 (weighted sum < 0)")
    print("- Light red region: Where output = 1 (weighted sum ‚â• 0)")
    print("- Each weight combination creates a DIFFERENT line!")


def why_lines_matter():
    """
    Explain why lines are the limitation
    """
    print("\n\nüéØ WHY LINES ARE THE LIMITATION")
    print("=" * 35)

    print("üîç The mathematical truth:")
    print("   A perceptron can ONLY separate data with a STRAIGHT line!")
    print()

    print("üìê What this means:")
    print("   ‚úÖ If you can draw ONE straight line to separate ‚úÖ from ‚ùå ‚Üí Solvable!")
    print("   ‚ùå If you need a curved line or multiple lines ‚Üí IMPOSSIBLE!")
    print()

    print("üéì Technical term: 'Linear Separability'")
    print("   - Linearly separable = can be separated by a line")
    print("   - Non-linearly separable = needs curves or multiple lines")
    print()

    print("üî¥ AND Gate: Linearly separable")
    print("   [0,0]‚Üí0, [0,1]‚Üí0, [1,0]‚Üí0, [1,1]‚Üí1")
    print("   Line: x‚ÇÅ + x‚ÇÇ = 1.5 separates them perfectly!")
    print()

    print("üîµ OR Gate: Linearly separable")
    print("   [0,0]‚Üí0, [0,1]‚Üí1, [1,0]‚Üí1, [1,1]‚Üí1")
    print("   Line: x‚ÇÅ + x‚ÇÇ = 0.5 separates them perfectly!")
    print()

    print("üî∂ XOR Gate: NOT linearly separable")
    print("   [0,0]‚Üí0, [0,1]‚Üí1, [1,0]‚Üí1, [1,1]‚Üí0")
    print("   NO straight line can separate them!")
    print("   You need a curve or multiple lines!")


def the_geometry_explanation():
    """
    Explain the geometric meaning
    """
    print("\n\nüìê THE GEOMETRIC EXPLANATION")
    print("=" * 35)

    print("üßÆ From the line equation: w‚ÇÅ√óx‚ÇÅ + w‚ÇÇ√óx‚ÇÇ + bias = 0")
    print()

    print("üìè The weights (w‚ÇÅ, w‚ÇÇ) determine the line's DIRECTION:")
    print("   - If w‚ÇÅ > w‚ÇÇ: Line slopes more towards x‚ÇÇ axis")
    print("   - If w‚ÇÇ > w‚ÇÅ: Line slopes more towards x‚ÇÅ axis")
    print("   - If w‚ÇÅ = w‚ÇÇ: Line has 45¬∞ slope")
    print()

    print("üìç The bias determines the line's POSITION:")
    print("   - Positive bias: Shifts line away from origin")
    print("   - Negative bias: Shifts line towards origin")
    print("   - Zero bias: Line passes through origin")
    print()

    print("üéØ The line divides the plane into TWO regions:")
    print("   - Region 1: w‚ÇÅ√óx‚ÇÅ + w‚ÇÇ√óx‚ÇÇ + bias ‚â• 0 ‚Üí output = 1")
    print("   - Region 2: w‚ÇÅ√óx‚ÇÅ + w‚ÇÇ√óx‚ÇÇ + bias < 0 ‚Üí output = 0")


def demonstrate_xor_impossibility():
    """
    Show mathematically why XOR is impossible
    """
    print("\n\nüö´ MATHEMATICAL PROOF: Why XOR is Impossible")
    print("=" * 50)

    print("üéØ For XOR to work, we need to find w‚ÇÅ, w‚ÇÇ, bias such that:")
    print()

    requirements = [
        ("[0,0] ‚Üí 0", "w‚ÇÅ√ó0 + w‚ÇÇ√ó0 + bias < 0", "bias < 0"),
        ("[0,1] ‚Üí 1", "w‚ÇÅ√ó0 + w‚ÇÇ√ó1 + bias ‚â• 0", "w‚ÇÇ + bias ‚â• 0"),
        ("[1,0] ‚Üí 1", "w‚ÇÅ√ó1 + w‚ÇÇ√ó0 + bias ‚â• 0", "w‚ÇÅ + bias ‚â• 0"),
        ("[1,1] ‚Üí 0", "w‚ÇÅ√ó1 + w‚ÇÇ√ó1 + bias < 0", "w‚ÇÅ + w‚ÇÇ + bias < 0"),
    ]

    for i, (case, full_eq, simplified) in enumerate(requirements, 1):
        print(f"   {i}. {case}: {full_eq} ‚Üí {simplified}")

    print()
    print("üîç Now let's find the contradiction:")
    print("   From equations 2 & 3: w‚ÇÅ + bias ‚â• 0 AND w‚ÇÇ + bias ‚â• 0")
    print("   Adding them: (w‚ÇÅ + bias) + (w‚ÇÇ + bias) ‚â• 0 + 0")
    print("   Simplifying: w‚ÇÅ + w‚ÇÇ + 2√óbias ‚â• 0")
    print()
    print("   From equation 1: bias < 0")
    print("   So: w‚ÇÅ + w‚ÇÇ + 2√ó(negative number) ‚â• 0")
    print("   This means: w‚ÇÅ + w‚ÇÇ ‚â• -2√óbias = positive number")
    print()
    print("   But equation 4 says: w‚ÇÅ + w‚ÇÇ + bias < 0")
    print("   Since bias < 0: w‚ÇÅ + w‚ÇÇ < -bias = positive number")
    print()
    print("   üí• CONTRADICTION!")
    print("   We need w‚ÇÅ + w‚ÇÇ to be BOTH ‚â• some positive AND < some positive!")
    print("   This is mathematically IMPOSSIBLE!")


def the_solution_hint():
    """
    Hint at how multiple perceptrons solve this
    """
    print("\n\nüí° THE SOLUTION HINT")
    print("=" * 25)

    print("ü§î If one line can't separate XOR...")
    print("   What if we use MULTIPLE lines?")
    print()

    print("üß† The breakthrough insight:")
    print("   XOR = (A OR B) AND NOT(A AND B)")
    print("   XOR = 'exactly one is true'")
    print()

    print("üèóÔ∏è Multi-layer approach:")
    print("   Layer 1, Perceptron A: Learns A OR B")
    print("   Layer 1, Perceptron B: Learns A AND B")
    print("   Layer 2, Perceptron C: Learns A AND NOT(B)")
    print("   Result: XOR solved!")
    print()

    print("üìê Geometrically:")
    print("   - Each perceptron draws its own line")
    print("   - Combined, they create complex decision regions")
    print("   - Can solve ANY pattern!")


def key_mathematical_insights():
    """
    Summarize the key mathematical insights
    """
    print("\n\nüéØ KEY MATHEMATICAL INSIGHTS")
    print("=" * 35)

    print("1Ô∏è‚É£ PERCEPTRON = LINE EQUATION:")
    print("   w‚ÇÅ√óx‚ÇÅ + w‚ÇÇ√óx‚ÇÇ + bias = 0 is literally a line!")
    print()

    print("2Ô∏è‚É£ WEIGHTS = LINE DIRECTION:")
    print("   Different weights ‚Üí different line slopes")
    print()

    print("3Ô∏è‚É£ BIAS = LINE POSITION:")
    print("   Different bias ‚Üí line shifts up/down")
    print()

    print("4Ô∏è‚É£ DECISION BOUNDARY:")
    print("   The line separates output=1 from output=0 regions")
    print()

    print("5Ô∏è‚É£ LINEAR SEPARABILITY:")
    print("   ‚úÖ Can separate with one line ‚Üí Perceptron can learn")
    print("   ‚ùå Need curves/multiple lines ‚Üí Perceptron CANNOT learn")
    print()

    print("6Ô∏è‚É£ XOR IMPOSSIBILITY:")
    print("   Mathematical proof shows contradictory requirements")
    print()

    print("7Ô∏è‚É£ THE SOLUTION:")
    print("   Multiple perceptrons = Multiple lines = Complex shapes!")


if __name__ == "__main__":
    print("üßÆ THE DEEP MATHEMATICS: Why Perceptrons Draw Lines!")
    print("=" * 60)
    print("Understanding the mathematical heart of perceptrons...")
    print()

    # The fundamental equation
    the_fundamental_equation()

    # Visual demonstration
    visualize_line_equation()

    # Why lines matter
    why_lines_matter()

    # Geometric explanation
    the_geometry_explanation()

    # XOR impossibility proof
    demonstrate_xor_impossibility()

    # Solution hint
    the_solution_hint()

    # Key insights
    key_mathematical_insights()

    print("\nüöÄ NOW YOU UNDERSTAND:")
    print("- WHY perceptrons draw lines (it's the math!)")
    print("- WHY some problems are impossible (linear separability)")
    print("- HOW multiple perceptrons can solve anything (multiple lines!)")
    print()
    print("Ready to see Multi-Layer Perceptrons in action? üí™")
